# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swigwrapper', [dirname(__file__)])
        except ImportError:
            import _swigwrapper
            return _swigwrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_swigwrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swigwrapper = swig_import_helper()
    del swig_import_helper
else:
    import _swigwrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigwrapper.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _swigwrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigwrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigwrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigwrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigwrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigwrapper.SwigPyIterator_copy(self)

    def next(self):
        return _swigwrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _swigwrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _swigwrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigwrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigwrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigwrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigwrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigwrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigwrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigwrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _swigwrapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["probability"] = _swigwrapper.Output_probability_set
    __swig_getmethods__["probability"] = _swigwrapper.Output_probability_get
    if _newclass:
        probability = _swig_property(_swigwrapper.Output_probability_get, _swigwrapper.Output_probability_set)
    __swig_setmethods__["tokens"] = _swigwrapper.Output_tokens_set
    __swig_getmethods__["tokens"] = _swigwrapper.Output_tokens_get
    if _newclass:
        tokens = _swig_property(_swigwrapper.Output_tokens_get, _swigwrapper.Output_tokens_set)
    __swig_setmethods__["timesteps"] = _swigwrapper.Output_timesteps_set
    __swig_getmethods__["timesteps"] = _swigwrapper.Output_timesteps_get
    if _newclass:
        timesteps = _swig_property(_swigwrapper.Output_timesteps_get, _swigwrapper.Output_timesteps_set)

    def __init__(self):
        this = _swigwrapper.new_Output()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swigwrapper.delete_Output
    __del__ = lambda self: None
Output_swigregister = _swigwrapper.Output_swigregister
Output_swigregister(Output)

class RetrieveStrEnumerateVocab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RetrieveStrEnumerateVocab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RetrieveStrEnumerateVocab, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swigwrapper.new_RetrieveStrEnumerateVocab()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Add(self, index, str):
        return _swigwrapper.RetrieveStrEnumerateVocab_Add(self, index, str)
    __swig_setmethods__["vocabulary"] = _swigwrapper.RetrieveStrEnumerateVocab_vocabulary_set
    __swig_getmethods__["vocabulary"] = _swigwrapper.RetrieveStrEnumerateVocab_vocabulary_get
    if _newclass:
        vocabulary = _swig_property(_swigwrapper.RetrieveStrEnumerateVocab_vocabulary_get, _swigwrapper.RetrieveStrEnumerateVocab_vocabulary_set)
    __swig_destroy__ = _swigwrapper.delete_RetrieveStrEnumerateVocab
    __del__ = lambda self: None
RetrieveStrEnumerateVocab_swigregister = _swigwrapper.RetrieveStrEnumerateVocab_swigregister
RetrieveStrEnumerateVocab_swigregister(RetrieveStrEnumerateVocab)
cvar = _swigwrapper.cvar
OOV_SCORE = cvar.OOV_SCORE
START_TOKEN = cvar.START_TOKEN
UNK_TOKEN = cvar.UNK_TOKEN
END_TOKEN = cvar.END_TOKEN

class Scorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scorer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _swigwrapper.new_Scorer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swigwrapper.delete_Scorer
    __del__ = lambda self: None

    def get_log_cond_prob(self, words):
        return _swigwrapper.Scorer_get_log_cond_prob(self, words)

    def get_sent_log_prob(self, words):
        return _swigwrapper.Scorer_get_sent_log_prob(self, words)

    def get_max_order(self):
        return _swigwrapper.Scorer_get_max_order(self)

    def is_character_based(self):
        return _swigwrapper.Scorer_is_character_based(self)

    def reset_params(self, alpha, beta):
        return _swigwrapper.Scorer_reset_params(self, alpha, beta)

    def make_ngram(self, prefix):
        return _swigwrapper.Scorer_make_ngram(self, prefix)

    def split_labels(self, labels):
        return _swigwrapper.Scorer_split_labels(self, labels)

    def save_dictionary(self, path):
        return _swigwrapper.Scorer_save_dictionary(self, path)
    __swig_setmethods__["alpha"] = _swigwrapper.Scorer_alpha_set
    __swig_getmethods__["alpha"] = _swigwrapper.Scorer_alpha_get
    if _newclass:
        alpha = _swig_property(_swigwrapper.Scorer_alpha_get, _swigwrapper.Scorer_alpha_set)
    __swig_setmethods__["beta"] = _swigwrapper.Scorer_beta_set
    __swig_getmethods__["beta"] = _swigwrapper.Scorer_beta_get
    if _newclass:
        beta = _swig_property(_swigwrapper.Scorer_beta_get, _swigwrapper.Scorer_beta_set)
Scorer_swigregister = _swigwrapper.Scorer_swigregister
Scorer_swigregister(Scorer)


def ctc_beam_search_decoder(*args):
    return _swigwrapper.ctc_beam_search_decoder(*args)
ctc_beam_search_decoder = _swigwrapper.ctc_beam_search_decoder

def ctc_beam_search_decoder_batch(*args):
    return _swigwrapper.ctc_beam_search_decoder_batch(*args)
ctc_beam_search_decoder_batch = _swigwrapper.ctc_beam_search_decoder_batch
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.IntVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.IntVector___bool__(self)

    def __len__(self):
        return _swigwrapper.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.IntVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.IntVector_pop(self)

    def append(self, x):
        return _swigwrapper.IntVector_append(self, x)

    def empty(self):
        return _swigwrapper.IntVector_empty(self)

    def size(self):
        return _swigwrapper.IntVector_size(self)

    def swap(self, v):
        return _swigwrapper.IntVector_swap(self, v)

    def begin(self):
        return _swigwrapper.IntVector_begin(self)

    def end(self):
        return _swigwrapper.IntVector_end(self)

    def rbegin(self):
        return _swigwrapper.IntVector_rbegin(self)

    def rend(self):
        return _swigwrapper.IntVector_rend(self)

    def clear(self):
        return _swigwrapper.IntVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.IntVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.IntVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _swigwrapper.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swigwrapper.IntVector_push_back(self, x)

    def front(self):
        return _swigwrapper.IntVector_front(self)

    def back(self):
        return _swigwrapper.IntVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.IntVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.IntVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.IntVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.IntVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _swigwrapper.IntVector_swigregister
IntVector_swigregister(IntVector)

class OutputVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.OutputVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.OutputVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.OutputVector___bool__(self)

    def __len__(self):
        return _swigwrapper.OutputVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.OutputVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.OutputVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.OutputVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.OutputVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.OutputVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.OutputVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.OutputVector_pop(self)

    def append(self, x):
        return _swigwrapper.OutputVector_append(self, x)

    def empty(self):
        return _swigwrapper.OutputVector_empty(self)

    def size(self):
        return _swigwrapper.OutputVector_size(self)

    def swap(self, v):
        return _swigwrapper.OutputVector_swap(self, v)

    def begin(self):
        return _swigwrapper.OutputVector_begin(self)

    def end(self):
        return _swigwrapper.OutputVector_end(self)

    def rbegin(self):
        return _swigwrapper.OutputVector_rbegin(self)

    def rend(self):
        return _swigwrapper.OutputVector_rend(self)

    def clear(self):
        return _swigwrapper.OutputVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.OutputVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.OutputVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.OutputVector_erase(self, *args)

    def __init__(self, *args):
        this = _swigwrapper.new_OutputVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swigwrapper.OutputVector_push_back(self, x)

    def front(self):
        return _swigwrapper.OutputVector_front(self)

    def back(self):
        return _swigwrapper.OutputVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.OutputVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.OutputVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.OutputVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.OutputVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.OutputVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_OutputVector
    __del__ = lambda self: None
OutputVector_swigregister = _swigwrapper.OutputVector_swigregister
OutputVector_swigregister(OutputVector)

class OutputVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swigwrapper.OutputVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigwrapper.OutputVectorVector___nonzero__(self)

    def __bool__(self):
        return _swigwrapper.OutputVectorVector___bool__(self)

    def __len__(self):
        return _swigwrapper.OutputVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _swigwrapper.OutputVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigwrapper.OutputVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigwrapper.OutputVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigwrapper.OutputVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigwrapper.OutputVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigwrapper.OutputVectorVector___setitem__(self, *args)

    def pop(self):
        return _swigwrapper.OutputVectorVector_pop(self)

    def append(self, x):
        return _swigwrapper.OutputVectorVector_append(self, x)

    def empty(self):
        return _swigwrapper.OutputVectorVector_empty(self)

    def size(self):
        return _swigwrapper.OutputVectorVector_size(self)

    def swap(self, v):
        return _swigwrapper.OutputVectorVector_swap(self, v)

    def begin(self):
        return _swigwrapper.OutputVectorVector_begin(self)

    def end(self):
        return _swigwrapper.OutputVectorVector_end(self)

    def rbegin(self):
        return _swigwrapper.OutputVectorVector_rbegin(self)

    def rend(self):
        return _swigwrapper.OutputVectorVector_rend(self)

    def clear(self):
        return _swigwrapper.OutputVectorVector_clear(self)

    def get_allocator(self):
        return _swigwrapper.OutputVectorVector_get_allocator(self)

    def pop_back(self):
        return _swigwrapper.OutputVectorVector_pop_back(self)

    def erase(self, *args):
        return _swigwrapper.OutputVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _swigwrapper.new_OutputVectorVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swigwrapper.OutputVectorVector_push_back(self, x)

    def front(self):
        return _swigwrapper.OutputVectorVector_front(self)

    def back(self):
        return _swigwrapper.OutputVectorVector_back(self)

    def assign(self, n, x):
        return _swigwrapper.OutputVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _swigwrapper.OutputVectorVector_resize(self, *args)

    def insert(self, *args):
        return _swigwrapper.OutputVectorVector_insert(self, *args)

    def reserve(self, n):
        return _swigwrapper.OutputVectorVector_reserve(self, n)

    def capacity(self):
        return _swigwrapper.OutputVectorVector_capacity(self)
    __swig_destroy__ = _swigwrapper.delete_OutputVectorVector
    __del__ = lambda self: None
OutputVectorVector_swigregister = _swigwrapper.OutputVectorVector_swigregister
OutputVectorVector_swigregister(OutputVectorVector)

# This file is compatible with both classic and new-style classes.


